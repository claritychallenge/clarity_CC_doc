(self.webpackChunkclarity_cec_1=self.webpackChunkclarity_cec_1||[]).push([[5265],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>p,kt:()=>m});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),c=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),h=n,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return a?i.createElement(m,o(o({ref:t},p),{},{components:a})):i.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5788:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=a(7462),n=(a(7294),a(3905));a(398);const r={id:"icassp2023_core_software",title:"Core Software",sidebar_label:"Core Software",sidebar_position:7},o=void 0,l={unversionedId:"icassp2023/software/icassp2023_core_software",id:"icassp2023/software/icassp2023_core_software",title:"Core Software",description:"The code is provided as a GitHub repository containing individual Python tools and a complete baseline system. Tools will allow the processing of individual scenes or the bulk processing of the complete Clarity dataset.",source:"@site/docs/icassp2023/software/icassp2023_core_software.mdx",sourceDirName:"icassp2023/software",slug:"/icassp2023/software/icassp2023_core_software",permalink:"/docs/icassp2023/software/icassp2023_core_software",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"icassp2023_core_software",title:"Core Software",sidebar_label:"Core Software",sidebar_position:7},sidebar:"tutorialSidebar_icassp2023",previous:{title:"Baseline System",permalink:"/docs/icassp2023/software/icassp2023_baseline"},next:{title:"Additional Tools",permalink:"/docs/icassp2023/software/icassp2023_additional_tools"}},s={},c=[{value:"A. Scene generator",id:"a-scene-generator",level:2},{value:"B. Hearing aid enhancement stage",id:"b-hearing-aid-enhancement-stage",level:2},{value:"C. The hearing aid amplification stage",id:"c-the-hearing-aid-amplification-stage",level:2},{value:"D. HASPI Speech Intelligibility model",id:"d-haspi-speech-intelligibility-model",level:2},{value:"E. HASQI Speech Quality model",id:"e-hasqi-speech-quality-model",level:2},{value:"References",id:"references",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The code is provided as a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/claritychallenge/clarity"},"GitHub repository")," containing individual Python tools and a complete baseline system. Tools will allow the processing of individual scenes or the bulk processing of the complete Clarity dataset."),(0,n.kt)("p",null,"The key elements of the baseline system are the:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Scene generator."),(0,n.kt)("li",{parentName:"ul"},"Baseline hearing aid enhancement."),(0,n.kt)("li",{parentName:"ul"},"Hearing aid amplification."),(0,n.kt)("li",{parentName:"ul"},"HASPI speech intelligibility model."),(0,n.kt)("li",{parentName:"ul"},"HASQI speech quality model.")),(0,n.kt)("p",null,"Additional tools are available to use as you see fit. These include a hearing loss model, differentiable source separation and hearing aid amplification modules and an alternative intelligibility model."),(0,n.kt)("h2",{id:"a-scene-generator"},"A. Scene generator"),(0,n.kt)("p",null,"Fully open-source Python code for generating hearing aid inputs for each scene"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inputs"),": target and interferer signals, HOA-IRs, RAVEN project (rpf) files, scene description JSON files"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Outputs"),": Mixed target+interferer signals for each hearing aid channel, direct path (simulating a measurement close to the eardrum). Reverberated pre-mixed signals can also be optionally generated.")),(0,n.kt)("h2",{id:"b-hearing-aid-enhancement-stage"},"B. Hearing aid enhancement stage"),(0,n.kt)("p",null,"The hearing aid enhancement stage supplied simply reduces the six channel input to two channels by selection the 'front' microphone on each ear. This is the component that you are challenged to replace."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inputs"),": 6 channel hearing aid input (3 microphones per for each ear)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Outputs"),": An enhanced stereo signal that is passed to the amplification stage.")),(0,n.kt)("h2",{id:"c-the-hearing-aid-amplification-stage"},"C. The hearing aid amplification stage"),(0,n.kt)("p",null,"The hearing aid amplifier consists of a NAL-R  fitting amplification stage ","[",(0,n.kt)("a",{parentName:"p",href:"#refs"},"1"),"]"," followed by a simple automatic gain compressor. It produces output signals in 16-bit wav format ready for HASPI and HASQI evaluation."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inputs"),": Stereo output of the enhancement stage and audiograms to characterise the listeners."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Outputs"),": Stereo hearing aid (HA) outputs signals.")),(0,n.kt)("h2",{id:"d-haspi-speech-intelligibility-model"},"D. HASPI Speech Intelligibility model"),(0,n.kt)("p",null,"Python implementation of the Hearing Aid Speech Perception Index (HASPI) ","[",(0,n.kt)("a",{parentName:"p",href:"#refs"},"2"),"]"," model which is used for objective intelligibility estimation. This will be one component of the evaluation metric."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inputs"),": reference target signal (i.e., the premixed target signal convolved with the BRIR with the reflections \u201cturned off\u201d, specified as \u2018target_anechoic\u2019), HA output signals, audiogram, level reference (level in dB SPL which corresponds to 0 dB FS)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Outputs"),": predicted intelligibility score\nIt is important to remember that both reference target and HA output signals have to be calibrated to the same dB SPL level before calculating HASPI.")),(0,n.kt)("h2",{id:"e-hasqi-speech-quality-model"},"E. HASQI Speech Quality model"),(0,n.kt)("p",null,"Python implementation of the Hearing Aid Speech Quality Index (HASQI) ","[",(0,n.kt)("a",{parentName:"p",href:"#refs"},"3"),"]"," model which is used for objective quality estimation. This will be one component of the evaluation metric."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inputs"),": reference target signal (i.e., the premixed target signal convolved with the BRIR with the reflections \u201cturned off\u201d, specified as \u2018target_anechoic\u2019), HA output signals, audiogram, level reference (level in dB SPL which corresponds to 0 dB FS)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Outputs"),": predicted intelligibility score\nIt is important to remember that both reference target and HA output signals have to be calibrated to the same dB SPL level before calculating HASPI.")),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("a",{name:"refs"}),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},'Byrne, Denis, and Harvey Dillon. "The National Acoustic Laboratories\'(NAL) new procedure for selecting the gain and frequency response of a hearing aid." Ear and hearing 7.4 (1986): 257-265.'),(0,n.kt)("li",{parentName:"ol"},'Kates, J.M. and Arehart, K.H., 2021. "The hearing-aid speech perception index (haspi) version 2". Speech Communication, 131, pp.35-46.'),(0,n.kt)("li",{parentName:"ol"},'Kates, J.M. and Arehart, K.H., 2014. "The hearing-aid speech quality index (HASQI) version 2". Journal of the Audio Engineering Society. 62 (3): 99\u2013117.')))}u.isMDXComponent=!0},1748:(e,t,a)=>{var i={"./locale":9234,"./locale.js":9234};function n(e){var t=r(e);return a(t)}function r(e){if(!a.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}n.keys=function(){return Object.keys(i)},n.resolve=r,e.exports=n,n.id=1748}}]);